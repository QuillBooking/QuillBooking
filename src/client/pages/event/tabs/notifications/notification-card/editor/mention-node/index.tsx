import { TextNode } from 'lexical';

export class MentionNode extends TextNode {
  __mention;
  __category;

  static getType() {
    return 'mention';
  }

  static clone(node) {
    return new MentionNode(node.__mention, node.__category, node.__text, node.__key);
  }

  constructor(mentionName, category, text, key) {
    super(text || `@${mentionName}`, key);
    this.__mention = mentionName;
    this.__category = category;
  }

  createDOM(config) {
    const dom = super.createDOM(config);
    dom.style.cssText = `
      color: #333333;
      background-color: #E3DFF1;
      padding: 2px 6px;
      margin: 0 6px;
      border-radius: 4px;
      font-weight: 400;
      border: 1px solid #333333;
      display: inline-flex;
      align-items: center;
      gap: 4px;
    `;
    dom.className = 'mention-node';

    // Create wrapper for the icon
    const iconContainer = document.createElement('span');
    iconContainer.className = 'mention-icon';

    // Insert the SVG icon directly based on category
    iconContainer.innerHTML = this.getSvgIcon();

    // Create text container
    const textContainer = document.createElement('span');
    textContainer.textContent = this.__text;

    // Clear existing content and structure the node
    dom.innerHTML = '';
    dom.appendChild(iconContainer);
    dom.appendChild(textContainer);

    return dom;
  }

  getSvgIcon() {
    // Return appropriate SVG based on category
    switch (this.__category) {
      case 'attendee':
      case 'host':
        return `<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7 13.2708C6.59167 13.2708 6.1775 13.1133 5.86833 12.8041L4.87082 11.8183C4.62582 11.5733 4.28751 11.4391 3.94334 11.4391H3.5C2.2925 11.4391 1.3125 10.465 1.3125 9.26913V2.89913C1.3125 1.70329 2.2925 0.729126 3.5 0.729126H10.5C11.7075 0.729126 12.6875 1.70329 12.6875 2.89913V9.26329C12.6875 10.4591 11.7075 11.4333 10.5 11.4333H10.0567C9.71249 11.4333 9.37418 11.5733 9.12918 11.8125L8.13167 12.7983C7.8225 13.1133 7.40833 13.2708 7 13.2708ZM3.5 1.60413C2.77667 1.60413 2.1875 2.18746 2.1875 2.89913V9.26329C2.1875 9.98079 2.77667 10.5583 3.5 10.5583H3.94334C4.52084 10.5583 5.08082 10.7916 5.48915 11.1941L6.48666 12.18C6.7725 12.46 7.23334 12.46 7.51918 12.18L8.51665 11.1941C8.92499 10.7916 9.485 10.5583 10.0625 10.5583H10.5C11.2233 10.5583 11.8125 9.97496 11.8125 9.26329V2.89913C11.8125 2.18163 11.2233 1.60413 10.5 1.60413H3.5Z" fill="#292D32"/>
<path d="M7.04065 5.6583C7.02898 5.6583 7.01148 5.6583 6.99981 5.6583C6.98231 5.6583 6.95899 5.6583 6.94149 5.6583C6.08983 5.62913 5.4248 4.9408 5.4248 4.0833C5.4248 3.21413 6.13065 2.5083 6.99981 2.5083C7.86898 2.5083 8.57482 3.21413 8.57482 4.0833C8.56899 4.9408 7.90399 5.62913 7.05233 5.6583C7.05233 5.6583 7.04648 5.6583 7.04065 5.6583ZM6.99981 3.3833C6.61481 3.3833 6.2998 3.6983 6.2998 4.0833C6.2998 4.46247 6.59732 4.77163 6.97065 4.7833C6.97065 4.77747 7.00566 4.77747 7.04649 4.7833C7.41399 4.75997 7.69982 4.45663 7.69982 4.0833C7.69982 3.6983 7.38481 3.3833 6.99981 3.3833Z" fill="#292D32"/>
<path d="M7 9.74167C6.335 9.74167 5.67001 9.56667 5.15084 9.22251C4.66084 8.89584 4.375 8.42334 4.375 7.92167C4.375 7.42 4.65501 6.94167 5.15084 6.615C6.18918 5.92667 7.81082 5.92667 8.84332 6.615C9.33332 6.94167 9.61916 7.42 9.61916 7.91584C9.61916 8.4175 9.33915 8.89001 8.84332 9.22251C8.32998 9.57251 7.665 9.74167 7 9.74167ZM5.63498 7.34417C5.38415 7.51334 5.25 7.7175 5.25 7.92167C5.25 8.12584 5.38998 8.33 5.63498 8.49917C6.37582 8.995 7.61834 8.995 8.35918 8.49917C8.61001 8.33 8.74999 8.12584 8.74416 7.92167C8.74416 7.7175 8.60418 7.51334 8.35918 7.34417C7.62418 6.84834 6.37582 6.84834 5.63498 7.34417Z" fill="#292D32"/>
</svg>`;

      case 'booking':
        return `<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.66699 3.35413C4.42783 3.35413 4.22949 3.15579 4.22949 2.91663V1.16663C4.22949 0.927459 4.42783 0.729126 4.66699 0.729126C4.90616 0.729126 5.10449 0.927459 5.10449 1.16663V2.91663C5.10449 3.15579 4.90616 3.35413 4.66699 3.35413Z" fill="#292D32"/>
<path d="M9.33301 3.35413C9.09384 3.35413 8.89551 3.15579 8.89551 2.91663V1.16663C8.89551 0.927459 9.09384 0.729126 9.33301 0.729126C9.57217 0.729126 9.77051 0.927459 9.77051 1.16663V2.91663C9.77051 3.15579 9.57217 3.35413 9.33301 3.35413Z" fill="#292D32"/>
<path d="M4.95833 8.45835C4.8825 8.45835 4.80667 8.44086 4.73667 8.41169C4.66083 8.38253 4.6025 8.34168 4.54417 8.28918C4.43917 8.17835 4.375 8.03252 4.375 7.87502C4.375 7.79919 4.3925 7.72335 4.42167 7.65335C4.45083 7.58335 4.49167 7.51919 4.54417 7.46086C4.6025 7.40836 4.66083 7.36751 4.73667 7.33834C4.94667 7.25084 5.20917 7.29752 5.3725 7.46086C5.4775 7.57169 5.54167 7.72335 5.54167 7.87502C5.54167 7.91002 5.53583 7.95086 5.53 7.99169C5.52417 8.02669 5.5125 8.06169 5.495 8.09669C5.48333 8.13169 5.46583 8.16668 5.4425 8.20168C5.425 8.23085 5.39583 8.26001 5.3725 8.28918C5.26167 8.39418 5.11 8.45835 4.95833 8.45835Z" fill="#292D32"/>
<path d="M7.00033 8.45838C6.92449 8.45838 6.84866 8.44089 6.77866 8.41172C6.70282 8.38256 6.64449 8.34171 6.58616 8.28921C6.48116 8.17838 6.41699 8.03255 6.41699 7.87505C6.41699 7.79921 6.43449 7.72338 6.46366 7.65338C6.49283 7.58338 6.53366 7.51922 6.58616 7.46089C6.64449 7.40839 6.70282 7.36754 6.77866 7.33837C6.98866 7.24504 7.25116 7.29755 7.41449 7.46089C7.51949 7.57172 7.58366 7.72338 7.58366 7.87505C7.58366 7.91005 7.57783 7.95089 7.57199 7.99172C7.56616 8.02672 7.55449 8.06172 7.53699 8.09672C7.52532 8.13172 7.50783 8.16671 7.48449 8.20171C7.46699 8.23088 7.43783 8.26004 7.41449 8.28921C7.30366 8.39421 7.15199 8.45838 7.00033 8.45838Z" fill="#292D32"/>
<path d="M9.04134 8.45838C8.96551 8.45838 8.88967 8.44089 8.81967 8.41172C8.74384 8.38256 8.68551 8.34171 8.62718 8.28921C8.60384 8.26004 8.58051 8.23088 8.55717 8.20171C8.53384 8.16671 8.51634 8.13172 8.50468 8.09672C8.48718 8.06172 8.47551 8.02672 8.46967 7.99172C8.46384 7.95089 8.45801 7.91005 8.45801 7.87505C8.45801 7.72338 8.52218 7.57172 8.62718 7.46089C8.68551 7.40839 8.74384 7.36754 8.81967 7.33837C9.03551 7.24504 9.29217 7.29755 9.45551 7.46089C9.56051 7.57172 9.62467 7.72338 9.62467 7.87505C9.62467 7.91005 9.61884 7.95089 9.61301 7.99172C9.60717 8.02672 9.59551 8.06172 9.57801 8.09672C9.56634 8.13172 9.54884 8.16671 9.52551 8.20171C9.50801 8.23088 9.47884 8.26004 9.45551 8.28921C9.34467 8.39421 9.19301 8.45838 9.04134 8.45838Z" fill="#292D32"/>
<path d="M4.95833 10.4999C4.8825 10.4999 4.80667 10.4825 4.73667 10.4533C4.66667 10.4241 4.6025 10.3833 4.54417 10.3308C4.43917 10.2199 4.375 10.0683 4.375 9.91661C4.375 9.84078 4.3925 9.76494 4.42167 9.69494C4.45083 9.61911 4.49167 9.55495 4.54417 9.50245C4.76 9.28662 5.15667 9.28662 5.3725 9.50245C5.4775 9.61328 5.54167 9.76495 5.54167 9.91661C5.54167 10.0683 5.4775 10.2199 5.3725 10.3308C5.26167 10.4358 5.11 10.4999 4.95833 10.4999Z" fill="#292D32"/>
<path d="M7.00033 10.4999C6.84866 10.4999 6.69699 10.4358 6.58616 10.3308C6.48116 10.2199 6.41699 10.0683 6.41699 9.91661C6.41699 9.84078 6.43449 9.76494 6.46366 9.69494C6.49283 9.61911 6.53366 9.55495 6.58616 9.50245C6.80199 9.28662 7.19866 9.28662 7.41449 9.50245C7.46699 9.55495 7.50782 9.61911 7.53699 9.69494C7.56616 9.76494 7.58366 9.84078 7.58366 9.91661C7.58366 10.0683 7.51949 10.2199 7.41449 10.3308C7.30366 10.4358 7.15199 10.4999 7.00033 10.4999Z" fill="#292D32"/>
<path d="M9.04134 10.5001C8.88967 10.5001 8.73801 10.4359 8.62718 10.3309C8.57468 10.2784 8.53384 10.2142 8.50468 10.1384C8.47551 10.0684 8.45801 9.99257 8.45801 9.91674C8.45801 9.8409 8.47551 9.76507 8.50468 9.69507C8.53384 9.61924 8.57468 9.55508 8.62718 9.50258C8.76134 9.36841 8.96551 9.30423 9.15217 9.34506C9.19301 9.3509 9.22801 9.36256 9.26301 9.38006C9.29801 9.39173 9.33301 9.40925 9.36801 9.43258C9.39718 9.45008 9.42634 9.47924 9.45551 9.50258C9.56051 9.61341 9.62467 9.76507 9.62467 9.91674C9.62467 10.0684 9.56051 10.2201 9.45551 10.3309C9.34467 10.4359 9.19301 10.5001 9.04134 10.5001Z" fill="#292D32"/>
<path d="M11.9587 5.73999H2.04199C1.80283 5.73999 1.60449 5.54166 1.60449 5.30249C1.60449 5.06332 1.80283 4.86499 2.04199 4.86499H11.9587C12.1978 4.86499 12.3962 5.06332 12.3962 5.30249C12.3962 5.54166 12.1978 5.73999 11.9587 5.73999Z" fill="#292D32"/>
<path d="M9.33333 13.2708H4.66667C2.5375 13.2708 1.3125 12.0458 1.3125 9.91663V4.95829C1.3125 2.82913 2.5375 1.60413 4.66667 1.60413H9.33333C11.4625 1.60413 12.6875 2.82913 12.6875 4.95829V9.91663C12.6875 12.0458 11.4625 13.2708 9.33333 13.2708ZM4.66667 2.47913C2.99833 2.47913 2.1875 3.28996 2.1875 4.95829V9.91663C2.1875 11.585 2.99833 12.3958 4.66667 12.3958H9.33333C11.0017 12.3958 11.8125 11.585 11.8125 9.91663V4.95829C11.8125 3.28996 11.0017 2.47913 9.33333 2.47913H4.66667Z" fill="#292D32"/>
</svg>`;

      case 'payment':
        return `<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M11.6667 2.33337H2.33333C1.59695 2.33337 1 2.93033 1 3.66671V10.3334C1 11.0698 1.59695 11.6667 2.33333 11.6667H11.6667C12.403 11.6667 13 11.0698 13 10.3334V3.66671C13 2.93033 12.403 2.33337 11.6667 2.33337Z" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M1 5.66663H13" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M3.66663 8.66663H3.67329" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M6.33337 8.66663H7.66671" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>`;

      case 'other':
      default:
        return `<svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9.33337 9.66671L12.6667 1.33337L4.33337 4.66671L7.00004 7.00004L9.33337 9.66671Z" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M9.33337 9.66663L7.00004 12.6666L4.33337 4.66663L12.6667 1.33329L9.33337 9.66663Z" stroke="#333333" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>`;
    }
  }

  updateDOM(prevNode, dom) {
    // No need to update if the mention and category haven't changed
    if (
      prevNode.__mention === this.__mention &&
      prevNode.__category === this.__category
    ) {
      return false;
    }

    // If we need to update, re-render the entire node
    const newDom = this.createDOM({});
    dom.parentNode.replaceChild(newDom, dom);
    return true;
  }

  exportJSON() {
    return {
      ...super.exportJSON(),
      mention: this.__mention,
      category: this.__category,
      type: 'mention',
      version: 1,
    };
  }

  static importJSON(serializedNode) {
    const node = new MentionNode(
      serializedNode.mention,
      serializedNode.category,
      serializedNode.text,
      undefined
    );
    node.setFormat(serializedNode.format);
    node.setDetail(serializedNode.detail);
    node.setMode(serializedNode.mode);
    node.setStyle(serializedNode.style);
    return node;
  }

  isTextEntity() {
    return true;
  }
}

export function $createMentionNode(mentionName, category) {
  const mentionNode = new MentionNode(mentionName, category, mentionName, undefined);
  return mentionNode;
}

export function $isMentionNode(node) {
  return node instanceof MentionNode;
}